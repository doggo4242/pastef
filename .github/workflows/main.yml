# This is a basic workflow to help you get started with Actions

name: Formatter updater

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 12 * * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: 'alpine:edge'
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Get and compress formatters
        run: |
          apk update
          apk --no-cache upgrade
          apk --no-cache add gcc musl-dev binutils go cmake make alpine-sdk git g++ curl rust ninja python3
          mkdir $GITHUB_WORKSPACE/formatters
          cp $(which rustfmt) $GITHUB_WORKSPACE/formatters
          cp $(which gofmt) $GITHUB_WORKSPACE/formatters
          go get -u github.com/klauspost/asmfmt/cmd/asmfmt
          export GOPATH=$(go env | grep GOPATH | cut -d= -f2 | tr -d \")
          export PATH=$PATH:$GOPATH/bin
          cp $(which asmfmt) $GITHUB_WORKSPACE/formatters
          curl -s "https://api.github.com/repos/tweag/ormolu/releases/latest" | python3 -c 'import sys,json;d=json.load(sys.stdin);print([i["browser_download_url"] for i in d["assets"] if "linux" in i["name"].lower()][0],end="")' | curl -L -s -o $GITHUB_WORKSPACE/formatters/ormolu $(</dev/fd/0)
          chmod +x $GITHUB_WORKSPACE/formatters/ormolu
          cd $GITHUB_WORKSPACE
          git clone https://github.com/Koihik/LuaFormatter.git
          cd LuaFormatter
          git submodule update --init --recursive
          cmake -GNinja -DBUILD_TESTS=OFF -DCOVERAGE=OFF .
          ninja -j75
          cp lua-format $GITHUB_WORKSPACE/formatters`
          cd $GITHUB_WORKSPACE
          curl -s "https://api.github.com/repos/pinterest/ktlint/releases/latest" | python3 -c 'import sys,json;d=json.load(sys.stdin);print([i["browser_download_url"] for i in d["assets"] if i["name"]=="ktlint"][0],end="")' | curl -L -s -o $GITHUB_WORKSPACE/formatters/ktlint $(</dev/fd/0)
          chmod +x $GITHUB_WORKSPACE/formatters/ktlint
          tar -czvf $GITHUB_WORKSPACE/formatters.tar.gz $GITHUB_WORKSPACE/formatters
          sha256sum $GITHUB_WORKSPACE/formatters.tar.gz > $GITHUB_WORKSPACE/formatters.sha2
      - uses: actions/upload-artifact@v2
        with:
          name: formatters.tar.gz
          path: formatters.tar.gz
      - uses: actions/upload-artifact@v2
        with:
          name: formatters.sha2
          path: formatters.sha2
